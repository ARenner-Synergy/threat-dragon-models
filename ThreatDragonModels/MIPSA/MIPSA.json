{
  "version": "2.0.2",
  "summary": {
    "title": "MIPSA",
    "owner": "Imran Shah",
    "description": "The purpose of the Marine Inspector Performance Support Architecture (MIPSA) project is to augment and implement user-driven functionality to better meet the operational requirements to effectively track and manage training tasks, certifications, and qualifications for inspectors.  ",
    "id": 0
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "id": 0,
        "title": "MIPSA STRIDE TM Diagram",
        "diagramType": "STRIDE",
        "placeholder": "New STRIDE diagram description",
        "thumbnail": "./public/content/images/thumbnail.stride.jpg",
        "version": "2.0.2",
        "description": "",
        "cells": [
          {
            "position": {
              "x": 199.9999999999991,
              "y": 130.62500000000253
            },
            "size": {
              "width": 710,
              "height": 332.81249999999994
            },
            "shape": "trust-boundary-box",
            "attrs": {
              "headerText": {
                "text": "CGOne"
              }
            },
            "zIndex": -1,
            "id": "19854e69-a4a8-42a1-ad1c-f0ca53e73ffd",
            "data": {
              "type": "tm.BoundaryBox",
              "name": "CGOne",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            }
          },
          {
            "position": {
              "x": 360,
              "y": 150
            },
            "size": {
              "width": 100,
              "height": 100
            },
            "attrs": {
              "text": {
                "text": "MIPSA \nWeb\nApplication"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 1,
            "id": "15bdaffe-8b4b-45b5-8eda-f00c5547726e",
            "data": {
              "type": "tm.Process",
              "name": "MIPSA \nWeb\nApplication",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "privilegeLevel": "",
              "hasOpenThreats": false,
              "threats": [
                {
                  "id": "7ce4d670-55b9-48f2-9f35-231082f03d10",
                  "title": "T1078.003 Valid Accounts: Local Accounts",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Elevation of privilege",
                  "description": "https://attack.mitre.org/techniques/T1078/003/\n\nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                  "mitigation": "CAC authentication is enforced for end users. Password policies for local accounts are configured according to STIG requirements. Creation, modification, use, and permissions associated to privileged accounts are managed by a limited number of MIPSA engineers and granted based on least privilege and need to know. \n\nMitigated by AC-2, AC-3, AC-5, AC-6, CA-7, CM-5, CM-6, IA-12, IA-2, SA-10, SA-11, SA-15, SA-16, SA-17, SA-3, SA-4, SA-8, SC-28, SI-4\n\nhttps://attack.mitre.org/mitigations/M1027\nSet and enforce secure password policies for accounts.\n\nhttps://attack.mitre.org/mitigations/M1026\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 4,
                  "score": ""
                },
                {
                  "id": "06c8db32-0457-44c9-a385-089dac40249c",
                  "title": "T1574.006 Hijack Execution Flow: Dynamic Linker Hijacking",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "https://attack.mitre.org/techniques/T1574/006/\nAdversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[1][2][3] These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.[4]\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Pythonâ€™s os.environ.\n\nOn Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file.[1][2] Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively. ",
                  "mitigation": "MIPSA containers are configured to comply with the following STIG requirements to maintain the integrity of containers and prohibiting execution of malicious payloads:\nV-233016: The container platform must use TLS 1.2 or greater for secure communication.\nV-233127: The container platform must prohibit containers from accessing privileged resources.\nV-233163: Container images instantiated by the container platform must execute using least privileges.\nV-233164: The container platform must audit the execution of privileged functio\nV-233191: The container platform must prevent component execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.\nV-233221: The container platform runtime must maintain separate execution domains for each container by assigning each container a separate address space.\nV-233229: The container platform must implement organization-defined security safeguards to protect system CPU and memory from resource depletion and unauthorized code execution.\n\n\nMitigated by AC-2, AC-3, AC-4, AC-5, AC-6, CA-7, CA-8, CM-2, CM-5, CM-6, CM-7, CM-8, IA-2, RA-5, SI-10, SI-2, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1038/\nBlock execution of code on a system through application control, and/or script blocking.\n\nhttps://attack.mitre.org/mitigations/M1028/\nMake configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 8,
                  "score": ""
                },
                {
                  "id": "b2ff0618-30e2-49da-bbfb-087ed58625b7",
                  "title": "T1106 Native API",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2] These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5] For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.[6][7] This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).",
                  "mitigation": "MIPSA containers comply with the following STIG requirements to mitigate this threat:\nV-233076: The container platform application program interface (API) must uniquely identify and authenticate users.\nV-233078: The container platform application program interface (API) must uniquely identify and authenticate processes acting on behalf of the users.\nV-233207: Container platform applications and Application Program Interfaces (API) used for nonlocal maintenance sessions must use FIPS-validated keyed-hash message authentication code (HMAC) to protect the integrity of nonlocal maintenance and diagnostic communications.\nV-233208: The container platform must configure web management tools and Application Program Interfaces (API) with FIPS-validated Advanced Encryption Standard (AES) cipher block algorithm to protect the confidentiality of maintenance and diagnostic communications for nonlocal maintenance sessions.\n\n\nMitigated by AC-6, CM-2, CM-6, CM-7, SI-2, SI-3, SI-4\n\nhttps://attack.mitre.org/mitigations/M1040/\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nhttps://attack.mitre.org/mitigations/M1038/\nBlock execution of code on a system through application control, and/or script blocking.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 9,
                  "score": ""
                },
                {
                  "id": "aa93a2b7-18fa-47b9-8445-2eafff7da444",
                  "title": "T1068 Exploitation for Privilege Escalation",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Elevation of privilege",
                  "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).[1][2] Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
                  "mitigation": "MIPSA containers are configured to comply with the following STIG requirements to mitigate this threat:\nV-233016: The container platform must use TLS 1.2 or greater for secure communication.\nV-233127: The container platform must prohibit containers from accessing privileged resources.\nV-233163: Container images instantiated by the container platform must execute using least privileges.\nV-233164: The container platform must audit the execution of privileged functions.\nV-233191: The container platform must prevent component execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.\nV-233229: The container platform must implement organization-defined security safeguards to protect system CPU and memory from resource depletion and unauthorized code execution.\n\n\nMitigated by AC-2, AC-4, AC-6, CA-7, CA-8, CM-2, CM-6, CM-7, CM-8, RA-10, RA-5, SC-18, SC-2, SC-26, SC-29, SC-3, SC-30, SC-35, SC-39, SC-7, SI-2, SI-3, SI-4, SI-5, SI-7\n\nhttps://attack.mitre.org/mitigations/M1048/\nRestrict execution of code to a virtual environment on or in transit to an endpoint system.\n\nhttps://attack.mitre.org/mitigations/M1038/\nBlock execution of code on a system through application control, and/or script blocking.\n\nhttps://attack.mitre.org/mitigations/M1050/\nUse capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\n\nhttps://attack.mitre.org/mitigations/M1019/\nA threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nhttps://attack.mitre.org/mitigations/M1051/\nPerform regular software updates to mitigate exploitation risk.\n",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 10,
                  "score": ""
                },
                {
                  "id": "20d5d261-f39c-465d-b10f-6e8066511e53",
                  "title": "T1055 Process Injection",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.\n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
                  "mitigation": "MIPSA containers are configured to comply with the following STIG requirements to maintain the integrity of containers and protect against process injection:\nV-233016: The container platform must use TLS 1.2 or greater for secure communication.\nV-233127: The container platform must prohibit containers from accessing privileged resources.\nV-233163: Container images instantiated by the container platform must execute using least privileges.\nV-233164: The container platform must audit the execution of privileged functio\nV-233191: The container platform must prevent component execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.\nV-233221: The container platform runtime must maintain separate execution domains for each container by assigning each container a separate address space.\nV-233229: The container platform must implement organization-defined security safeguards to protect system CPU and memory from resource depletion and unauthorized code execution.\n\nMitigated by AC-2, AC-3, AC-5, AC-6, CM-5, CM-6, IA-2, SC-18, SC-7, SI-2, SI-3, SI-4\n\nhttps://attack.mitre.org/mitigations/M1040/\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nhttps://attack.mitre.org/mitigations/M1026/\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 12,
                  "score": ""
                },
                {
                  "id": "ec86140e-b54d-43f0-bbf1-a59cb251df16",
                  "title": "T1070 Indicator Removal",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversaryâ€™s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                  "mitigation": "MIPSA containers are configured to comply with the following STIG requirements to maintain the integrity of containers and prohibit indicator removal:\n\nV-233015: The container platform must use TLS 1.2 or greater for secure container image transport from trusted sources.\nV-233016: The container platform must use TLS 1.2 or greater for secure communication.\nV-233026: Least privilege access and need to know must be required to access the container platform registry.\nV-233063: The container platform must use FIPS validated cryptographic mechanisms to protect the integrity of log information.\nV-233084: The container platform must use FIPS-validated SHA-1 or higher hash function to provide replay-resistant authentication mechanisms for network access to privileged accounts.\nV-233123: The container platform must preserve any information necessary to determine the cause of the disruption or failure.\nV-233142: The container platform must use cryptographic mechanisms to protect the integrity of audit tools.\nV-233162: The container platform must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.\n\n\nMitigated by AC-16, AC-17, AC-18, AC-19, AC-2, AC-3, AC-5, AC-6, CA-7, CM-2, CM-6, CP-6, CP-7, CP-9, SC-36, SC-4, SI-12, SI-23, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1041/\nProtect sensitive information with strong encryption.\n\nhttps://attack.mitre.org/mitigations/M1029/\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nhttps://attack.mitre.org/mitigations/M1022/\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 13,
                  "score": ""
                },
                {
                  "id": "e9ba022f-cfd3-4b40-b53b-ddd75206e2d9",
                  "title": "T1036 Masquerading",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.[1]",
                  "mitigation": "MIPSA containers are configured to comply with the following STIG requirements to maintain the integrity of containers and prohibit masquerading:\n\nV-233015: The container platform must use TLS 1.2 or greater for secure container image transport from trusted sources.\nV-233016: The container platform must use TLS 1.2 or greater for secure communication.\nV-233026: Least privilege access and need to know must be required to access the container platform registry.\nV-233063: The container platform must use FIPS validated cryptographic mechanisms to protect the integrity of log information.\nV-233065: The container platform must verify container images.\nV-233084: The container platform must use FIPS-validated SHA-1 or higher hash function to provide replay-resistant authentication mechanisms for network access to privileged accounts.\nV-233285: The container platform must use FIPS-validated SHA-2 or higher hash function for digital signature generation and verification (non-legacy use).\nV-233123: The container platform must preserve any information necessary to determine the cause of the disruption or failure.\nV-233142: The container platform must use cryptographic mechanisms to protect the integrity of audit tools.\nV-233162: The container platform must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.\n\nMitigated by AC-2, AC-3, AC-6, CA-7, CM-2, CM-6, CM-7, IA-9, SI-10, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1049/\nUse signatures or heuristics to detect malicious software.\n\nhttps://attack.mitre.org/mitigations/M1040/\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nhttps://attack.mitre.org/mitigations/M1045/\nEnforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nhttps://attack.mitre.org/mitigations/M1038/\nBlock execution of code on a system through application control, and/or script blocking.\n\nhttps://attack.mitre.org/mitigations/M1022/\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 16,
                  "score": ""
                },
                {
                  "id": "ec15a7ea-9bbf-4396-b499-f9dceaf1124d",
                  "title": "T1499 Endpoint Denial of Service",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Denial of service",
                  "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]\n\nFor attacks attempting to saturate the providing network, see Network Denial of Service.",
                  "mitigation": "Network appliances are outside of the MIPSA boundary, configured according to STIG requirements, and managed by the USCG.\n\nMIPSA containers are configured to comply with the following STIG requirements to prevent DoS:\nV-233026: Least privilege access and need to know must be required to access the container platform registry.\nV-233027: Least privilege access and need to know must be required to access the container platform runtime.\nV-233029: The container platform must enforce approved authorizations for controlling the flow of information within the container platform based on organization-defined information flow control policies.\nV-233030: The container platform must enforce approved authorizations for controlling the flow of information between interconnected systems and services based on organization-defined information flow control policies.\nV-233129: The container platform must restrict individuals' ability to launch organizationally defined denial-of-service (DoS) attacks against other information systems.\nV-233222: The container platform must protect against or limit the effects of all types of denial-of-service (DoS) attacks by employing organization-defined security safeguards.\nV-233229: The container platform must implement organization-defined security safeguards to protect system CPU and memory from resource depletion and unauthorized code execution.\n\nMitigated by AC-3, AC-4, CA-7, CM-6, CM-7, SC-7, SI-10, SI-15, SI-4\n\nhttps://attack.mitre.org/mitigations/M1037/\nUse network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 19,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 33.5,
              "y": 130.62500000000057
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "USCG iPad"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 2,
            "id": "67e045fd-61d3-4e9a-951d-f5988aebee0d",
            "data": {
              "type": "tm.Actor",
              "name": "USCG iPad",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "providesAuthentication": false,
              "hasOpenThreats": false,
              "threats": [
                {
                  "id": "ba02a8f9-8497-417e-a5ab-3602b7c25ccd",
                  "title": "T1133 External Remote Services",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "https://attack.mitre.org/techniques/T1133/\n\nAdversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.[1]\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2] Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesnâ€™t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
                  "mitigation": "External remote services are managed by USCG and are outside of the MIPSA boundary.  Remote access is used to restrict access to authorized users. Two factor CAC authentication is enforced. Physical and logical segmentation is used to prevent access to potentially sensitive systems and information. A DMZ is in place to contain internet-facing services that should not be exposed from the internal network.  \n\nMitigated by AC-17, AC-20, AC-23, AC-3, AC-4, AC-6, AC-7, CM-2, CM-6, CM-7, CM-8, IA-2, IA-5, RA-5, SC-46, SC-7, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1042/\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nhttps://attack.mitre.org/mitigations/M1035/\nPrevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nhttps://attack.mitre.org/mitigations/M1032/\nUse two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nhttps://attack.mitre.org/mitigations/M1030/\nArchitect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 7,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 59.75,
              "y": 388
            },
            "size": {
              "width": 60,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Azure AD"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 3,
            "id": "2e3459b9-6edf-498b-b8d4-e2b0c6485444",
            "data": {
              "type": "tm.Process",
              "name": "Azure AD",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "privilegeLevel": "",
              "hasOpenThreats": false,
              "threats": []
            }
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Authentication\nResponse",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "HTTPS",
              "isEncrypted": true,
              "isPublicNetwork": true,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "1e2dfd80-42a9-4ca1-929d-7725a7c01360",
            "labels": [
              "Authentication\nResponse"
            ],
            "source": {
              "cell": "2e3459b9-6edf-498b-b8d4-e2b0c6485444"
            },
            "target": {
              "x": 130,
              "y": 190
            },
            "vertices": [
              {
                "x": 150,
                "y": 300
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Authentication \nRequest",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": true,
              "isPublicNetwork": true,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "57a46882-5bdc-45cf-885b-3e169c1a4ea6",
            "labels": [
              "Authentication \nRequest"
            ],
            "source": {
              "x": 80,
              "y": 190
            },
            "target": {
              "cell": "2e3459b9-6edf-498b-b8d4-e2b0c6485444"
            },
            "vertices": [
              {
                "x": 50,
                "y": 290
              },
              {
                "x": 50,
                "y": 350
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Authentication\nResponse",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": true,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "22b1bf04-59e5-4f94-ad84-6a6bf4c0b16c",
            "labels": [
              "Authentication\nResponse"
            ],
            "source": {
              "cell": "adb668bd-aebc-4550-ac99-4c88d8f6a011"
            },
            "target": {
              "cell": "c2b16b27-38c1-4f9d-99ba-bde4115df2e7"
            },
            "vertices": [
              {
                "x": 480,
                "y": 400
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Authentication\nRequest",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": true,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "fa08abe5-56d4-441c-be6b-6da353818e8f",
            "labels": [
              "Authentication\nRequest"
            ],
            "source": {
              "cell": "c2b16b27-38c1-4f9d-99ba-bde4115df2e7"
            },
            "target": {
              "cell": "adb668bd-aebc-4550-ac99-4c88d8f6a011"
            },
            "vertices": [
              {
                "x": 320,
                "y": 380
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "HTTPS \nRequest",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "HTTPS",
              "isEncrypted": true,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "df1f1d20-39a6-4385-924c-f1a9ef9bedd0",
            "labels": [
              "HTTPS \nRequest"
            ],
            "source": {
              "cell": "c2b16b27-38c1-4f9d-99ba-bde4115df2e7"
            },
            "target": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "vertices": [
              {
                "x": 290,
                "y": 270
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "HTTPS Response",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "HTTPS",
              "isEncrypted": true,
              "isPublicNetwork": true,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "c338eb5e-5c52-4152-88ca-2f19d68b0f55",
            "labels": [
              "HTTPS Response"
            ],
            "source": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "target": {
              "cell": "67e045fd-61d3-4e9a-951d-f5988aebee0d"
            },
            "vertices": [
              {
                "x": 230,
                "y": 215
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "HTTPS Request",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "HTTPS",
              "isEncrypted": true,
              "isPublicNetwork": true,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "3491aad1-cc99-4ca2-9c34-294d04a1e252",
            "labels": [
              "HTTPS Request"
            ],
            "source": {
              "cell": "67e045fd-61d3-4e9a-951d-f5988aebee0d"
            },
            "target": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "vertices": [
              {
                "x": 325,
                "y": 146
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": false,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "808656f2-6d09-4f0d-b7a6-bade110e87da",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "target": {
              "cell": "e26cac15-5d4b-4c54-a484-4cda2860e701"
            },
            "vertices": [
              {
                "x": 550,
                "y": 170
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": false,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "57c22c29-f25a-4590-9b98-9b8a027a2a4f",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "e26cac15-5d4b-4c54-a484-4cda2860e701"
            },
            "target": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "vertices": [
              {
                "x": 540,
                "y": 220
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": false,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "2f7f630d-de94-45df-84d7-b965637c2594",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "target": {
              "cell": "8cc69027-2873-4638-8d9d-12bf325405ca"
            },
            "vertices": [
              {
                "x": 560,
                "y": 280
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "",
              "isEncrypted": false,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "9f89758e-ac16-433d-b520-aaf216d77780",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "8cc69027-2873-4638-8d9d-12bf325405ca"
            },
            "target": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "vertices": [
              {
                "x": 560,
                "y": 358
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "targetMarker": {
                  "name": "classic"
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "HTTPS\nResponse",
              "description": "",
              "outOfScope": false,
              "isBidirectional": false,
              "reasonOutOfScope": "",
              "protocol": "HTTPS",
              "isEncrypted": true,
              "isPublicNetwork": false,
              "hasOpenThreats": false,
              "threats": []
            },
            "id": "58f5209a-78f2-4dec-90f6-1735522708de",
            "labels": [
              "HTTPS\nResponse"
            ],
            "source": {
              "cell": "15bdaffe-8b4b-45b5-8eda-f00c5547726e"
            },
            "target": {
              "cell": "c2b16b27-38c1-4f9d-99ba-bde4115df2e7"
            },
            "vertices": [
              {
                "x": 360,
                "y": 260
              }
            ]
          },
          {
            "position": {
              "x": 353.75,
              "y": 298
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "USCG \nWorkstation"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 11,
            "id": "c2b16b27-38c1-4f9d-99ba-bde4115df2e7",
            "data": {
              "type": "tm.Actor",
              "name": "USCG \nWorkstation",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "providesAuthentication": false,
              "hasOpenThreats": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 375,
              "y": 393.4375000000025
            },
            "size": {
              "width": 70,
              "height": 70
            },
            "attrs": {
              "text": {
                "text": "USCG \nAD"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 12,
            "id": "adb668bd-aebc-4550-ac99-4c88d8f6a011",
            "data": {
              "type": "tm.Process",
              "name": "USCG \nAD",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "privilegeLevel": "",
              "hasOpenThreats": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 636,
              "y": 190
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "TMT Database"
              },
              "topLine": {
                "strokeWidth": 1,
                "strokeDasharray": null
              },
              "bottomLine": {
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 13,
            "id": "e26cac15-5d4b-4c54-a484-4cda2860e701",
            "data": {
              "type": "tm.Store",
              "name": "TMT Database",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "isALog": false,
              "storesCredentials": false,
              "isEncrypted": false,
              "isSigned": false,
              "hasOpenThreats": false,
              "threats": [
                {
                  "id": "087705e5-0a84-433b-902a-9adb5b451d77",
                  "title": "T1078.003 Valid Accounts: Local Accounts",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "https://attack.mitre.org/techniques/T1078/003/\nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                  "mitigation": "Creation, modification, use, and permissions associated to privileged accounts are controlled to abide by the principle of least privilege and need to know. \n\nThe database is also compliant with the following STIGs:\nV-220313: The DBMS must protect against an individual who uses a shared account falsely denying having performed a particular action.\nV-237739: The DBMS must implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nMitigated by AC-2, AC-3, AC-5, AC-6, CA-7, CM-5, CM-6, IA-12, IA-2, SA-10, SA-11, SA-15, SA-16, SA-17, SA-3, SA-4, SA-8, SC-28, SI-4\n\nhttps://attack.mitre.org/mitigations/M1027/\nSet and enforce secure password policies for accounts.\n\nhttps://attack.mitre.org/mitigations/M1026/\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 5,
                  "score": ""
                },
                {
                  "id": "fbd9c337-77ea-4d8c-97be-ed063ed845ff",
                  "title": "T1070 Indicator Removal",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversaryâ€™s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                  "mitigation": "The database is compliant with the following STIGs to protect against indicator removal:\nV-220277: The system must protect audit information from any type of unauthorized access.\nV-220278: The system must protect audit information from unauthorized modification.\nV-220279: The system must protect audit information from unauthorized deletion.\nV-220281: The system must protect audit tools from unauthorized modification.\nV-220297: The DBMS must take needed steps to protect data at rest and ensure confidentiality and integrity of application data.\nV-237740: Database data files containing sensitive information must be encrypted.\n\nMitigated by AC-16, AC-17, AC-18, AC-19, AC-2, AC-3, AC-5, AC-6, CA-7, CM-2, CM-6, CP-6, CP-7, CP-9, SC-36, SC-4, SI-12, SI-23, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1041/\nProtect sensitive information with strong encryption.\n\nhttps://attack.mitre.org/mitigations/M1029/\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nhttps://attack.mitre.org/mitigations/M1022/\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 14,
                  "score": ""
                },
                {
                  "id": "7a73a37c-fc19-47a9-939b-9eb7d5a38b6b",
                  "title": "T1485 Data Destruction",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Denial of service",
                  "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5] In some cases politically oriented image files have been used to overwrite data.[2][3][4]\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1][2][3][4][6].\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.",
                  "mitigation": "Backups are configured and in place for the TMT DB. The database is compliant with the following STIGs to protect against data destruction:\nV-220296: The DBMS must preserve any organization-defined system state information in the event of a system failure.\nV-237720: Database backup procedures must be defined, documented, and implemented.\nV-237721: Database recovery procedures must be developed, documented, implemented, and periodically tested.\nV-237722: DBMS backup and restoration files must be protected from unauthorized access.\n\n\nMitigated by AC-3, AC-6, CM-2, CP-10, CP-2, CP-7, CP-9, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1053/\nTake and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 17,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 626,
              "y": 328
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "MIPSA NoSQL \nDatabase"
              },
              "topLine": {
                "strokeWidth": 1,
                "strokeDasharray": null
              },
              "bottomLine": {
                "strokeWidth": 1,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 14,
            "id": "8cc69027-2873-4638-8d9d-12bf325405ca",
            "data": {
              "type": "tm.Store",
              "name": "MIPSA NoSQL \nDatabase",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "isALog": false,
              "storesCredentials": false,
              "isEncrypted": false,
              "isSigned": false,
              "hasOpenThreats": false,
              "threats": [
                {
                  "id": "2c4c774f-c497-4c75-81e0-f7c4566ed2a3",
                  "title": "T1078.003 Valid Accounts: Local Accounts",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "https://attack.mitre.org/techniques/T1078/003/\nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                  "mitigation": "Creation, modification, use, and permissions associated to privileged accounts are controlled to abide by the principle of least privilege and need to know. \n\nThe database is also compliant with the following STIGs:\nV-252149: MongoDB must integrate with an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals.\nV-252152: MongoDB software installation account must be restricted to authorized users.\n\n\nMitigated by AC-2, AC-3, AC-5, AC-6, CA-7, CM-5, CM-6, IA-12, IA-2, SA-10, SA-11, SA-15, SA-16, SA-17, SA-3, SA-4, SA-8, SC-28, SI-4\n\nhttps://attack.mitre.org/mitigations/M1027/\nSet and enforce secure password policies for accounts.\n\nhttps://attack.mitre.org/mitigations/M1026/\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 6,
                  "score": ""
                },
                {
                  "id": "e9e2cfeb-abe4-45d5-9de9-a91dd76c13ff",
                  "title": "T1070 Indicator Removal",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversaryâ€™s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                  "mitigation": "The database is compliant with the following STIGs to protect against indicator removal:\nV-252134: MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components.\nV-252135: The audit information produced by MongoDB must be protected from unauthorized access.\nV-252136: MongoDB must protect its audit features from unauthorized access.\n\n\nMitigated by AC-16, AC-17, AC-18, AC-19, AC-2, AC-3, AC-5, AC-6, CA-7, CM-2, CM-6, CP-6, CP-7, CP-9, SC-36, SC-4, SI-12, SI-23, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1041/\nProtect sensitive information with strong encryption.\n\nhttps://attack.mitre.org/mitigations/M1029/\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nhttps://attack.mitre.org/mitigations/M1022/\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 15,
                  "score": ""
                },
                {
                  "id": "6749eccf-c8cd-4064-a52e-6a3127ff67bc",
                  "title": "T1485 Data Destruction",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "type": "Denial of service",
                  "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5] In some cases politically oriented image files have been used to overwrite data.[2][3][4]\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1][2][3][4][6].\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.",
                  "mitigation": "Backups are configured and in place for the MIPSA DB. The database is compliant with the following STIGs to protect against data destruction:\nV-252171: MongoDB must utilize centralized management of the content captured in audit records generated by all components of MongoDB.\n\nMitigated by AC-3, AC-6, CM-2, CP-10, CP-2, CP-7, CP-9, SI-3, SI-4, SI-7\n\nhttps://attack.mitre.org/mitigations/M1053/\nTake and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 18,
                  "score": ""
                }
              ]
            }
          }
        ]
      }
    ],
    "diagramTop": 3,
    "reviewer": "",
    "threatTop": 19
  }
}